// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Provider {
  GITHUB
  GOOGLE
}

model OAuthAccount {
  providerId     Provider
  providerUserId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([providerId, providerUserId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id    String @id @default(uuid())
  email String @unique

  sessions Session[]

  username  String
  avatarUrl String?
  about     String?
  score     Int     @default(0)

  posts                  Post[]
  comments               Comment[]
  votes                  Vote[]
  communitiesAsModerator Community[] @relation("communityMods")
  communitiesAsMember    Community[]

  createdAt    DateTime       @default(now())
  OAuthAccount OAuthAccount[]
}

model Community {
  id Int @id @default(autoincrement())

  name        String  @unique
  description String
  imageUrl    String?

  createdAt DateTime @default(now())

  posts      Post[]
  moderators User[] @relation("communityMods")
  members    User[]
}

model Post {
  id String @id @default(uuid())

  title    String
  content  String
  mediaUrl String?
  removed  Boolean @default(false)

  score Int @default(0)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  communityId Int
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  comment Comment[]
}

model Comment {
  id String @id @default(uuid())

  content String
  score   Int     @default(0)
  deleted Boolean @default(false)

  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentCommentId String?   @map("parentId")
  parentComment   Comment?  @relation("ChildComments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments   Comment[] @relation("ChildComments")
}

model Vote {
  id String @id @default(uuid())

  value Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  targetType VoteTarget
  targetId   String

  @@unique([userId, targetType, targetId])
}

enum VoteTarget {
  POST
  COMMENT
}
